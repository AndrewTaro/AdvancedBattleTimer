(def constant TT_BATTLETIMER_INSTALLED "true")
(def constant AdvBT_ELEMENT_NAME 'advBattleTimer')

(def constant AdvBT_DISPLAY_MODES {
	DISABLE : 0,
	ENABLE  : 1,
	ADAPTIVE: 2,
})

(def constant AdvBT_ELEMENT_SIZE {
	WIDTH   : 60px,
    HEIGHT  : 30px,
})

(def constant AdvBT_PREBATTLE_ANIM_DURATION 0.5)
(def constant AdvBT_PREBATTLE_APPEAR_DELAY 0.5)

(def element BattleTimer (_battleState:number) layout=true)

(def element PrebattleText() layout=true)

(def css $AdvBT_BattleText()
    (extends $Bold)
    (extends $FontSizeDefault)
	(extends $FontColorDefault)
	(extends $TextMouseDisable)
    (extends $FontEnableReadability)
    (marginTextTop = -6px)
    (marginTextBottom = -5px)
    (width = 100%)
    (textAlign = "center")
    (filters 
        (dropShadow 
            (distance = 1)
            (angle = 45)
            (color = 0)
            (alpha = 1)
            (blurX = 2.0)
            (blurY = 2.0)
            (strength = 0.5)
            (quality = 1)
        )
    )
)

(def css $AdvBT_PreBattleText()
    (extends $Bold)
	(extends $FontColorWhite)

	(fontSize = 110)
    (filters
        (dropShadow
            (distance = 0)
            (angle = 0)
            (color = 0)
            (alpha = 1)
            (blurX = 16)
            (blurY = 16)
            (strength = 1)
            (quality = 2)
        )
    )

    (textAlign = "center")

	(marginLeft = -4px)
	(marginRight = -4px)
	(marginTop = -19px)
	(marginBottom = -15px)
)

(def macro AdvBT_APPEAR_ANIMATION(_delayIndex:expression="0")
    (style
        (alpha = 0)
    )
    (controller $Animation
        (bindcall play 
            from     = "{visualOffsetY: -10, alpha: 0}"
            to       = "{visualOffsetY:   0, alpha: 1}"
            delay    = "AdvBT_PREBATTLE_APPEAR_DELAY * _delayIndex"
            duration = "0.3"
            (event "evAddedToStage")
        )
    )
)

(def element AdvBT_BattleTimer () layout=true
    (scope
        (macro TT_GET_USERPREF)
        (macro STAGE_SIZE)
        (var battleDataEntity:gfx = "$datahub.getSingleEntity(CC.battleData)")
		(var gameModeId:number = "battleDataEntity.battleInfo.gameModeId")

		(var battleState:number = "battleDataEntity.battleState.battleState" (event "battleDataEntity.battleState.evBattleStateChanged"))
        (var isBattleTimerVisible:bool = "!(isIn(gameModeId, SC.Battle.GAME_MODE.BATTLE_TIMER_HIDDEN)) && battleState == SC.Common.CLIENT_BATTLE_STATE.STARTED")
        (var isPreBattleTimerVisible:bool = "battleState == SC.Common.CLIENT_BATTLE_STATE.COUNTDOWN" watch=false)
        (event evPreBattleAnimEnded)
        (event evRemovePreBattleTimer)
        (bind isPreBattleTimerVisible "false" init=false (event "evRemovePreBattleTimer"))
	)

    (dispatch evRemovePreBattleTimer args="{}" delay="0.01" init=false (event "evPreBattleAnimEnded"))
    # Without this delay the game will crash when reloading the ub2
    # its an edge case that never happens in the normal gameplay but it is cringe

    (style
        (position = "absolute")
        (bind width "stageWidth")
        (bind height "stageHeight")
    )

    (controller $Instance renderer='AdvBT_BattleTimerText'
        (bind enabled "isBattleTimerVisible")
        (args
            _battleState    = "battleState"
            _userPrefsNum   = "_userPrefsNum"
        )
    )

    (controller $Instance renderer='AdvBT_PreBattleTimerText'
        (bind enabled "isPreBattleTimerVisible")
        (args
            _userPrefsNum   = "_userPrefsNum"
        )
    )
)

(def element AdvBT_BattleTimerText (_battleState:number, _userPrefsNum:gfx=null)
    (scope
        (var cameraComponent:gfx = "$datahub.getSingleComponent(CC.camera)")
	    (var altVision:bool = "cameraComponent ? cameraComponent.altVision : false" (event "cameraComponent.evAltVisionChanged"))

        (macro STAGE_SIZE)
        (var defaultPos:dict = "{positionX: stageWidth - 176 - AdvBT_ELEMENT_SIZE.WIDTH, positionY: 0}") # stageWidth - MainHud offset - width of this element
        (macro DRAGGABLE_GET_DROP_POSITION _elementName = "AdvBT_ELEMENT_NAME" _defaultPosition = "defaultPos")

        (macro TT_GET_PREF_BOOL   _varName="'isPositionLocked'" 	_pref="AdvBT_PREFS.DISABLE_DRAGDROP")
        (macro TT_GET_PREF_NUMBER _varName="'bgAlpha'"              _pref="AdvBT_PREFS.BACKGROUND.ALPHA")
        (macro TT_GET_PREF_NUMBER _varName="'bgDisplayMode'"        _pref="AdvBT_PREFS.BACKGROUND.DISPLAY_MODE")
        (var isBGVisible:bool = "bgDisplayMode == AdvBT_DISPLAY_MODES.ADAPTIVE ? altVision : bgDisplayMode")

        (macro TT_GET_PREF_NUMBER _varName="'fontSize'"             _pref="AdvBT_PREFS.FONT_SIZE")
        (macro TT_GET_PREF_NUMBER _varName="'warnTime'"             _pref="AdvBT_PREFS.WARN_TIME")
        (var warnTimeSec:number = "warnTime * 60")


        (var battleEntity:gfx = "$datahub.getSingleEntity(CC.battleTimer)")
		(var battleTime:number = "battleEntity.battleTimer.battleTime" (event "battleEntity.battleTimer.evBattleTimeChanged"))
		(var battleDuration:number = "battleEntity.battleInfo.duration * 60")
		(var battleTimeLeft:number = "battleDuration - battleTime")
		(var isBattleStarted:bool = "_battleState == SC.Common.CLIENT_BATTLE_STATE.STARTED")
        # Mod
        (var isWarning:bool = "(isBattleStarted && battleTimeLeft < warnTimeSec)")
		(var btTextColor:number = "isWarning    ? SC.Ui_styles.SERVICE_COLORS.ORANGE
                                                : SC.Ui_styles.SERVICE_COLORS.WHITE")
        #
		(var timerText:str = "countdownFormat(battleTimeLeft, 0, true)")

        (event evAddedToStage)
    )

    (style
        (position = "absolute")
        (bind left "dragPosX")
        (bind top "dragPosY")
    )

    (dispatch evAddedToStage args="{}" on=addedToStage)

    (macro AdvBT_APPEAR_ANIMATION)

    # Draggable
    (controller $Instance renderer='ModDraggableElement'
        (bind enabled "!isPositionLocked")
        (args
            _elementName="AdvBT_ELEMENT_NAME"
            _defaultPosition = "defaultPos"
        )
    )

    # BG
    (mc contrast_panel
        (class $FullsizeAbsolute)
        (bind visible "isBGVisible")
        (style
            (hitTest = false)
            (bind alpha "bgAlpha")
        )
    )

    # Main
    (block
        (style
            (width = "AdvBT_ELEMENT_SIZE.WIDTH")
            (height = "AdvBT_ELEMENT_SIZE.HEIGHT")
            (align = "middle|center")
            (hitTest = false)
        )
        (tf
            (class $AdvBT_BattleText)
            (style
                (bind textColor "btTextColor")
                (bind fontSize "fontSize")
            )
            
            (bind text "timerText")
        )
    )
)

(def element AdvBT_PreBattleTimerText (_userPrefsNum:gfx=null) layout=true
	(scope
        (event evAddedToStage)
        (event evPreBattleAnimEnded)
        (event evPreBattleEnded)

        (var timer:gfx = "$datahub.getSingleComponent(CC.timer)")

		(var battleInfoEntity:gfx = "$datahub.getSingleEntity(CC.battleInfo)")
        (var gameModeTitle:str = "battleInfoEntity.battleInfo.gameMode")
		(var gameModeDescription:str = "battleInfoEntity.battleInfo.gameModeDescription")
        (var battleType:str = "battleInfoEntity.battleInfo.battleType")

        # The precision of battleTimer.battleTime is fucking awful for some reason so we have to manually do this
        (var countEndTime:number = "battleInfoEntity.battleTimer.battleTime + timer.currentTime - AdvBT_PREBATTLE_ANIM_DURATION" watch=false init=true)
        (var countTimeLeft:number = "ceil(max(countEndTime - timer.currentTime, 0))" watch=false (event "timer.evFrequent"))
		(var countTimeLeftText:str = "countdownFormat(countTimeLeft, 0, true)")

        (var tensIndex:number = "countTimeLeftText.length - 2") # Guaranteed to be <=0 due to countdownFormat
        (var onesIndex:number = "countTimeLeftText.length - 1") # Guaranteed to be <=0 due to countdownFormat
        (var tensDigit:str = "countTimeLeftText[tensIndex]")
        (var onesDigit:str = "countTimeLeftText[onesIndex]")
	)

    (dispatch evAddedToStage args="{}" delay=2 on='addedToStage') # deffered init for better animation
    (dispatch evPreBattleEnded args="{}" init=false (bind enabled "countTimeLeft <= 0") (bind trigger "countTimeLeft"))

	(style
        (width = 100%)
        (position = "absolute")
        (top = "XXL")
		(align = "center|middle")
        (hitTest = false)
	)

    # Disappear
    (controller $Animation
        (bindcall play 
            from     = "{visualOffsetY:   0, alpha: 1}"
            to       = "{visualOffsetY: -10, alpha: 0}"
            delay    = "AdvBT_PREBATTLE_APPEAR_DELAY"
            duration = "AdvBT_PREBATTLE_ANIM_DURATION"
            (event "evPreBattleEnded")
        )
        (dispatch evPreBattleAnimEnded dir="EventDirection.UP" args="{}" init=false on=evAnimEnded)
    )

    (block
        (style
            (align = "middle|center")
        )
        (macro AdvBT_APPEAR_ANIMATION _delayIndex="0")

        (blendMode = layer)
        (block
            (class $MiddleAlignedAbsolutely)
            (style
                (backgroundImage = "'url:../ttaro_battle_timer/gradient_mask.png'")
                (backgroundSize = "autosize")
                (top = -110)
            )
            (blendMode = alpha)
        )
        (block
            (class $MiddleAlignedAbsolutely)
            (style
                (backgroundSize = "autosize")
                (alpha = 0.5)
                (top = "MS")
                (bind backgroundImage "'url:../service_kit/battle_types/' + battleType + '_big.png'")
            )
        )
        
        (hblock
            (style
                (marginTop = "MS")
                (height = 90px)
            )

            (block
                (element AdvBT_AnimatedDigitText _value="tensDigit" _maxLifeTime=11 _isEnabled="tensDigit != '0'")
            )
            (block
                (element AdvBT_AnimatedDigitText _value="onesDigit" _maxLifeTime=2 _isEnabled="!(tensDigit == '0' && onesDigit == '0')")
            )
        )
    )
    (block
        (style
            (align = "middle|center")
            (vgap = 15px)
        )
        (tf
            (class $TextDefaultBold36NM)
            (bind text "'IDS_' + toUpper(gameModeTitle) + '_TITLE'")
            (macro AdvBT_APPEAR_ANIMATION _delayIndex="1")
        )
		(tf
			(class $TextDefaultBold19NM)
			(bind text "gameModeDescription")
            (macro AdvBT_APPEAR_ANIMATION _delayIndex="2")
		)
	)
)

(def element AdvBT_AnimatedDigitText(_value:str, _maxLifeTime:number, _isEnabled:bool = true)
    (scope
        (event evAddedToStage)
        (event evHidePrevValue)
        (event evShowNewValue)

        (var isVisible:bool = true)
        (var prevValue:str = "_value" watch=false)
        (bind prevValue "_value" init=false watch=false (event "evShowNewValue"))
    )

    (dispatch evAddedToStage args="{}" on='addedToStage')

    (dispatch evHidePrevValue       args="{targetValue: prevValue}" init=false dir="EventDirection.DOWN" (bind trigger "_value"))
    (dispatch evShowNewValue        args="{}" delay="AdvBT_PREBATTLE_ANIM_DURATION" (bind enabled "_isEnabled") (event "evHidePrevValue")(event "evAddedToStage"))

    (controller $FxInstance renderer='AdvBT_DigitText' lifetime="_maxLifeTime"
        (args
            _value="_value"
        )
        (bindcall create (event "evShowNewValue"))
    )
)

(def element AdvBT_DigitText(_value:str)
    (scope
        (event evAddedToStage)
        (event evHidePrevValue)
        (event evHide)
        (event evHideCompleted)
        (var value:str = "_value" watch=false)
        (var isDisappearing:bool = "$event ? $event.targetValue == value : false" watch=false (event "evHidePrevValue")) # prevent the newly added element from disappearing
    )

    (dispatch evHide args="{}" init=false watch=false (bind enabled "isDisappearing") (event "evHidePrevValue"))
    (dispatch evHideCompleted args="{}" delay="AdvBT_PREBATTLE_ANIM_DURATION" init=false watch=false (event "evHide")) # need to hide this element in order to align another digit properly
    (dispatch evAddedToStage on='addedToStage')

    (bind visible "false" watch=false init=false (event "evHideCompleted"))

    (style
        (height = 0px)
        (width = 50px)
        (alpha = 0)
        (visualOffsetY = -50px)
    )

    (controller $Animation
		(bindcall play 
            from     = "{visualOffsetY: -50, alpha: 0}"
            to       = "{visualOffsetY:   0, alpha: 1}"
            easing   ="Easing.expo_out"
            duration = "AdvBT_PREBATTLE_ANIM_DURATION"
			(event "evAddedToStage")
		)
        (bindcall play 
            to       = "{visualOffsetY:  50, alpha: 0}"
            duration = "AdvBT_PREBATTLE_ANIM_DURATION"
            easing   = "Easing.expo_in"
            action   = "append"
			(event "evHide")
		)
	)

    (tf
        (class $AdvBT_PreBattleText)
        (bind text "value")
    )
)